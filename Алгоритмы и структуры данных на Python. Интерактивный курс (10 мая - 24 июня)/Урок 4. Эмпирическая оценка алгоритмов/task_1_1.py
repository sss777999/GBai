'''
1. Проанализировать скорость и сложность одного любого алгоритма из разработанных в рамках домашнего задания первых трех уроков.
Примечание. Идеальным решением будет:
a. выбрать хорошую задачу, которую имеет смысл оценивать,
b. написать 3 варианта кода (один у вас уже есть),
c. проанализировать 3 варианта и выбрать оптимальный,
d. результаты анализа вставить в виде комментариев в файл с кодом (не забудьте указать, для каких N вы проводили замеры),
e. написать общий вывод: какой из трёх вариантов лучше и почему.
    Найти сумму n элементов следующего ряда чисел: 1, -0.5, 0.25, -0.125,…
Количество элементов (n) вводится с клавиатуры.
'''

# с использованием списка и суммориванием с итерацией по списку
import cProfile

n = []
m = 1
#b = 10000000


def check(b):
    global n, m
    a = 0
    for i in range(b):
        m = m / -2
        n.append(m)
    for i in n:
        a += i
    return a


#check(b)

# cProfile.run('check()')
# 10000004 function calls in 3.243 seconds
# 1    0.000    0.000    3.243    3.243 <string>:1(<module>)
#         1    2.599    2.599    3.243    3.243 task_1.py:13(check)
#         1    0.000    0.000    3.243    3.243 {built-in method builtins.exec}
#  10000000    0.644    0.000    0.644    0.000 {method 'append' of 'list' objects}
#         1    0.000    0.000    0.000    0.000 {method 'disable' of '_lsprof.Profiler' objects}

# timeit
# python3 -m timeit -n 3 -s "import task_1_1" "task_1_1.check(10000000)"
# 3 loops, best of 5: 1.83 sec per loop
