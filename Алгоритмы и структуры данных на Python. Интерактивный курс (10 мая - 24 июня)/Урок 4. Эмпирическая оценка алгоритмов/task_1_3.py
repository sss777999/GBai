'''
1. Проанализировать скорость и сложность одного любого алгоритма из разработанных в рамках домашнего задания первых трех уроков.
Примечание. Идеальным решением будет:
a. выбрать хорошую задачу, которую имеет смысл оценивать,
b. написать 3 варианта кода (один у вас уже есть),
c. проанализировать 3 варианта и выбрать оптимальный,
d. результаты анализа вставить в виде комментариев в файл с кодом (не забудьте указать, для каких N вы проводили замеры),
e. написать общий вывод: какой из трёх вариантов лучше и почему.
    Найти сумму n элементов следующего ряда чисел: 1, -0.5, 0.25, -0.125,…
Количество элементов (n) вводится с клавиатуры.
'''

# с использованием списка и встроенной функции sum
import cProfile


def check():
    n = []
    m = 1
    a = 0
    b = 10000000
    for i in range(b):
        m = m / -2
        n.append(m)
    a = sum(n)
    return a

# cProfile.run('check()')
# 10000005 function calls in 2.467 seconds
#  1    0.102    0.102    2.479    2.479 <string>:1(<module>)
#         1    1.630    1.630    2.377    2.377 task_3.py:7(check)
#         1    0.000    0.000    2.479    2.479 {built-in method builtins.exec}
#         1    0.074    0.074    0.074    0.074 {built-in method builtins.sum}
#  10000000    0.673    0.000    0.673    0.000 {method 'append' of 'list' objects}
#         1    0.000    0.000    0.000    0.000 {method 'disable' of '_lsprof.Profiler' objects}

# timeit
# python3 -m timeit -n 10 -s "import task_1_3" "task_1_3.check()"
# 10 loops, best of 5: 1.13 sec per loop
